(function (e, f) {
    if (!e.browser) {
        var c = {}, d = navigator.userAgent.toLowerCase(),
            b = /(chrome)[ \/]([\w.]+)/.exec(d) || /(webkit)[ \/]([\w.]+)/.exec(d) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(d) || /(msie) ([\w.]+)/.exec(d) || d.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(d) || [],
            a = {
                browser: b[1] || "",
                version: b[2] || 0
            };
        if (a.browser) {
            c[a.browser] = true;
            c.version = a.version
        }
        if (c.chrome) {
            c.webkit = true
        } else {
            if (c.webkit) {
                c.safari = true
            }
        }
        e.browser = c
    }
}(jQuery));
(function (d, h, o) {
    var e = {
        getEvent: function (p) {
            return p || h.event
        },
        preventDefault: function (p) {
            if (p.preventDefault) {
                p.preventDefault()
            } else {
                p.returnValue = false
            }
        }
    }, k = h.requestAnimationFrame || h.mozRequestAnimationFrame || h.webkitRequestAnimationFrame || h.oRequestAnimationFrame || h.msRequestAnimationFrame || function (p) {
            setTimeout(p, 1000 / 60)
        }, c = function (s) {
            var r = d(this).data("enscroll"),
                q = this,
                p = r.settings,
                t = function () {
                    var v = d(this).data("enscroll"),
                        u = v.settings;
                    if (v && u.showOnHover) {
                        if (u.verticalScrolling && d(v.verticalTrackWrapper).css("display") !== "none") {
                            d(v.verticalTrackWrapper).stop().fadeTo("fast", 0)
                        }
                        if (u.horizontalScrolling && d(v.horizontalTrackWrapper).css("display") !== "none") {
                            d(v.horizontalTrackWrapper).stop().fadeTo("fast", 0)
                        }
                        v._fadeTimer = null
                    }
                };
            if (r && p.showOnHover) {
                if (r._fadeTimer) {
                    clearTimeout(r._fadeTimer)
                } else {
                    if (p.verticalScrolling && d(r.verticalTrackWrapper).css("display") !== "none") {
                        d(r.verticalTrackWrapper).stop().fadeTo("fast", 1)
                    }
                    if (p.horizontalScrolling && d(r.horizontalTrackWrapper).css("display") !== "none") {
                        d(r.horizontalTrackWrapper).stop().fadeTo("fast", 1)
                    }
                } if (s !== false) {
                    r._fadeTimer = setTimeout(function () {
                        t.call(q)
                    }, 1500)
                }
            }
        }, i = function (t, p) {
            var r = d(t),
                s = r.data("enscroll"),
                q = r.scrollTop();
            if (s && s.settings.verticalScrolling) {
                r.scrollTop(q + p);
                if (s.settings.showOnHover) {
                    c.call(t)
                }
            }
        }, l = function (t, p) {
            var r = d(t),
                s = r.data("enscroll"),
                q = r.scrollLeft();
            if (s && s.settings.horizontalScrolling) {
                r.scrollLeft(q + p);
                if (s.settings.showOnHover) {
                    c.call(t)
                }
            }
        }, n = function (s) {
            if (s.which !== 1) {
                return
            }
            var v = s.data.pane,
                x = d(v).data("enscroll"),
                D = true,
                t, y, p, r, q, w, E, z, A, u = function () {
                    if (D) {
                        if (p !== r) {
                            d(v).scrollTop(p * A / z);
                            r = p
                        }
                        k(u);
                        c.call(v)
                    }
                }, C = function (F) {
                    if (D) {
                        p = F.clientY - w - q;
                        p = Math.min(p < 0 ? 0 : p, z)
                    }
                    return false
                }, B = function (F) {
                    D = false;
                    o.body.style.cursor = E;
                    this.style.cursor = "";
                    d(t).removeClass("dragging");
                    d(o.body).off("mousemove.enscroll.vertical").off("mouseup.enscroll.vertical");
                    return false
                };
            t = d(x.verticalTrackWrapper).find(".enscroll-track").addClass("dragging").get(0);
            y = t.firstChild;
            p = parseInt(y.style.top, 10);
            A = v.scrollHeight - d(v).innerHeight();
            q = s.clientY - d(y).offset().top;
            z = d(t).height() - d(y).outerHeight();
            w = d(t).offset().top;
            d(o.body).on({
                "mousemove.enscroll.vertical": C,
                "mouseup.enscroll.vertical": function (F) {
                    B.call(y, F)
                }
            });
            E = d(o.body).css("cursor");
            this.style.cursor = o.body.style.cursor = "ns-resize";
            u();
            return false
        }, a = function (q) {
            if (q.which !== 1) {
                return
            }
            var u = q.data.pane,
                w = d(u).data("enscroll"),
                D = true,
                s, y, p, r, A, v, x, E, z, t = function () {
                    if (D) {
                        if (p !== r) {
                            d(u).scrollLeft(p * A / z);
                            r = p
                        }
                        k(t);
                        c.call(u)
                    }
                }, C = function (F) {
                    if (D) {
                        p = F.clientX - x - v;
                        p = Math.min(p < 0 ? 0 : p, z);
                        c.call(u)
                    }
                    return false
                }, B = function (F) {
                    D = false;
                    d(s).removeClass("dragging");
                    o.body.style.cursor = E;
                    this.style.cursor = "";
                    d(s).removeClass("dragging");
                    d(o.body).off("mousemove.enscroll.horizontal").off("mouseup.enscroll.horizontal");
                    return false
                };
            s = d(w.horizontalTrackWrapper).find(".enscroll-track").addClass("dragging").get(0);
            y = s.firstChild;
            p = parseInt(y.style.left, 10);
            A = u.scrollWidth - d(u).innerWidth();
            v = q.clientX - d(y).offset().left;
            z = d(s).width() - d(y).outerWidth();
            x = d(s).offset().left;
            d(o.body).on({
                "mousemove.enscroll.horizontal": C,
                "mouseup.enscroll.horizontal": function (F) {
                    B.call(y, F)
                }
            });
            E = d("body").css("cursor");
            this.style.cursor = o.body.style.cursor = "ew-resize";
            t();
            return false
        }, m = function (r) {
            var s = this.data("enscroll"),
                t, p, u, q;
            if (s) {
                r = e.getEvent(r);
                u = r.detail ? -r.detail : (window.client && window.client.engine.opera && window.client.engine.opera < 9.5) ? -r.wheelDelta : r.wheelDelta;
                q = s.settings.scrollIncrement;
                if (r.wheelDelta && r.wheelDeltaX && r.wheelDelta === r.wheelDeltaX || r.axis && r.HORIZONTAL_AXIS && r.axis === r.HORIZONTAL_AXIS) {
                    t = this.scrollLeft();
                    l(this, u < 0 ? q : -q);
                    if (t !== this.scrollLeft()) {
                        e.preventDefault(r)
                    }
                } else {
                    p = this.scrollTop();
                    i(this, u < 0 ? q : -q);
                    if (p !== this.scrollTop()) {
                        e.preventDefault(r)
                    }
                }
            }
        }, j = function (q) {
            var u = d(this),
                t = u.data("enscroll"),
                s, p, r;
            if (t) {
                if (t.settings.verticalScrolling) {
                    p = d(t.verticalTrackWrapper).find(".enscroll-track").get(0);
                    s = p.firstChild;
                    r = u.scrollTop() / (this.scrollHeight - u.innerHeight());
                    r = isNaN(r) ? 0 : r;
                    s.style.top = (r * (d(p).height() - d(s).outerHeight())) + "px"
                }
                if (t.settings.horizontalScrolling) {
                    p = d(t.horizontalTrackWrapper).find(".enscroll-track").get(0);
                    s = p.firstChild;
                    r = u.scrollLeft() / (this.scrollWidth - u.innerWidth());
                    r = isNaN(r) ? 0 : r;
                    s.style.left = (r * (d(p).width() - d(s).innerWidth())) + "px"
                }
            }
        }, f = function (r) {
            var t = d(this),
                q = this,
                s = t.data("enscroll"),
                p;
            if (r.target === this && s) {
                p = s.settings.scrollIncrement;
                switch (r.keyCode) {
                case 32:
                case 34:
                    i(this, t.height());
                    return false;
                case 33:
                    i(this, -t.height());
                    return false;
                case 35:
                    i(this, this.scrollHeight);
                    return false;
                case 36:
                    i(this, -this.scrollHeight);
                    return false;
                case 37:
                    l(this, -p);
                    return false;
                case 38:
                    i(this, -p);
                    return false;
                case 39:
                    l(this, p);
                    return false;
                case 40:
                    i(this, p);
                    return false
                }
                return true
            }
        }, b = function (q) {
            var z, w, v, y, t, p, A, s = this,
                u = function (B) {
                    z = B.touches[0].clientX;
                    w = B.touches[0].clientY;
                    if (!v) {
                        if (w === t && z === y) {
                            v = undefined
                        } else {
                            if (Math.abs(t - w) > Math.abs(y - z)) {
                                v = "y"
                            } else {
                                v = "x"
                            }
                        }
                    }
                    B.preventDefault()
                }, r = function () {
                    if (!p) {
                        return
                    }
                    if (v === "y") {
                        i(s, t - w);
                        A = t - w;
                        t = w
                    } else {
                        if (v === "x") {
                            l(s, y - z);
                            A = y - z;
                            y = z
                        }
                    }
                    k(r)
                }, x = function () {
                    var B = 0,
                        E = Math.round(Math.abs(A * 1.75)),
                        D = 10 * A * Math.log(2);
                    this.removeEventListener("touchmove", u, false);
                    this.removeEventListener("touchend", x, false);
                    p = false;
                    k(function C() {
                        if (B === E || p) {
                            return
                        }
                        var F = Math.round(D / E * Math.pow(2, -10 * B / E + 1));
                        if (!isNaN(F) && F !== 0) {
                            B += 1;
                            if (v === "y") {
                                i(s, F)
                            } else {
                                l(s, F)
                            }
                            k(C)
                        }
                    })
                };
            if (q.touches.length === 1) {
                y = q.touches[0].clientX;
                t = q.touches[0].clientY;
                p = true;
                this.addEventListener("touchmove", u, false);
                this.addEventListener("touchend", x, false);
                k(r)
            }
        }, g = {
            reposition: function () {
                return this.each(function () {
                    var u = d(this),
                        t = u.data("enscroll"),
                        r = function (A, z, B) {
                            A.style.left = z + "px";
                            A.style.right = z + "px";
                            A.style.top = B + "px"
                        }, x = function (z, B) {
                            var y = d(z).css(B),
                                A = /^-?\d+/.exec(y);
                            return A ? +A[0] : 0
                        }, w, p, s, q, v;
                    if (t) {
                        s = u.position();
                        v = d.browser.msie && /^6/.test(d.browser.version);
                        if (v) {
                            q = u.offsetParent().get(0)
                        }
                        w = t.corner;
                        if (t.settings.verticalScrolling) {
                            p = t.verticalTrackWrapper;
                            r(p, s.left + u.outerWidth() - d(p).width() - x(this, "border-right-width") - (v ? x(q, "padding-left") : 0), s.top + x(this, "border-top-width") + (v ? x(q, "border-top-width") : 0))
                        }
                        if (t.settings.horizontalScrolling) {
                            p = t.horizontalTrackWrapper;
                            r(p, s.left + x(this, "border-left-width") - (v ? x(q, "padding-left") : 0), s.top + u.outerHeight() - d(p).height() - x(this, "border-bottom-width") + (v ? x(q, "border-bottom-width") : 0))
                        }
                        if (w) {
                            r(w, s.left + u.outerWidth() - d(w).outerWidth() - x(this, "border-right-width") - (v ? x(q, "padding-left") : 0), s.top + u.outerHeight() - d(w).outerHeight() - x(this, "border-bottom-width") + (v ? x(q, "border-bottom-width") : 0))
                        }
                    }
                })
            },
            resize: function () {
                return this.each(function () {
                    var s = d(this),
                        G = s.data("enscroll"),
                        C, w, F, A, q, z, v, p, B, t, x, r, D, u, y, E;
                    if (s.is(":visible") && G) {
                        C = G.settings;
                        if (C.verticalScrolling) {
                            A = G.verticalTrackWrapper;
                            w = s.innerHeight();
                            q = w / this.scrollHeight;
                            z = d(A).find(".enscroll-track").get(0);
                            B = d(A).find("." + C.scrollUpButtonClass);
                            t = d(A).find("." + C.scrollDownButtonClass);
                            p = C.horizontalScrolling ? w - d(G.horizontalTrackWrapper).find(".enscroll-track").outerHeight() : w;
                            p -= d(z).outerHeight() - d(z).height() + B.outerHeight() + t.outerHeight();
                            D = z.firstChild;
                            y = Math.max(q * p, C.minScrollbarLength);
                            y -= d(D).outerHeight() - d(D).height();
                            A.style.display = "none";
                            z.style.height = p + "px";
                            D.style.height = y + "px";
                            if (q < 1) {
                                q = s.scrollTop() / (this.scrollHeight - s.height());
                                D.style.top = (q * (p - y)) + "px";
                                A.style.display = "block"
                            }
                        }
                        if (C.horizontalScrolling) {
                            A = G.horizontalTrackWrapper;
                            F = s.innerWidth();
                            q = F / this.scrollWidth;
                            z = d(A).find(".enscroll-track").get(0);
                            x = d(A).find("." + C.scrollLeftButtonClass);
                            r = d(A).find("." + C.scrollRightButtonClass);
                            v = C.verticalScrolling ? F - d(G.verticalTrackWrapper).find(".enscroll-track").outerWidth() : F;
                            v -= d(z).outerWidth() - d(z).width() + x.outerWidth() + r.outerWidth();
                            D = z.firstChild;
                            u = Math.max(q * v, C.minScrollbarLength);
                            u -= d(D).outerWidth() - d(D).width();
                            A.style.display = "none";
                            z.style.width = v + "px";
                            D.style.width = u + "px";
                            if (q < 1) {
                                q = s.scrollLeft() / (this.scrollWidth - s.width());
                                D.style.left = (q * (v - u)) + "px";
                                A.style.display = "block"
                            }
                            if (G._prybar) {
                                E = G._prybar;
                                this.removeChild(E);
                                if (C.verticalScrolling) {
                                    E.style.width = (this.scrollWidth + d(G.verticalTrackWrapper).find(".enscroll-track").outerWidth()) + "px";
                                    this.appendChild(E)
                                }
                            }
                        }
                        if (G.corner) {
                            G.corner.style.display = G.verticalTrackWrapper && G.horizontalTrackWrapper && d(G.verticalTrackWrapper).is(":visible") && d(G.horizontalTrackWrapper).is(":visible") ? "block" : "none"
                        }
                    }
                })
            },
            startPolling: function () {
                return this.each(function () {
                    var t = d(this).data("enscroll"),
                        s = this,
                        q = d(s),
                        w = -1,
                        r = -1,
                        x = -1,
                        p = -1,
                        v, u = function () {
                            if (t.settings.pollChanges) {
                                var y = s.scrollWidth,
                                    z = s.scrollHeight,
                                    A = q.width(),
                                    C = q.height(),
                                    B = q.offset();
                                if (t.settings.verticalScrolling && (C !== r || z !== p) || t.settings.horizontalScrolling && (A !== w || y !== x)) {
                                    x = y;
                                    p = z;
                                    g.resize.call(q)
                                }
                                if (v.left !== B.left || v.top !== B.top || A !== w || C !== r) {
                                    v = B;
                                    w = A;
                                    r = C;
                                    g.reposition.call(q)
                                }
                                setTimeout(u, 350)
                            }
                        };
                    if (t) {
                        t.settings.pollChanges = true;
                        p = s.scrollHeight;
                        x = s.scrollWidth;
                        v = q.offset();
                        u()
                    }
                })
            },
            stopPolling: function () {
                return this.each(function () {
                    var p = d(this).data("enscroll");
                    if (p) {
                        p.settings.pollChanges = false
                    }
                })
            },
            destroy: function () {
                return this.each(function () {
                    var r = d(this),
                        q = r.data("enscroll"),
                        p, s;
                    if (q) {
                        g.stopPolling.call(r);
                        s = q._mouseScrollHandler;
                        if (q.settings.verticalScrolling) {
                            p = q.verticalTrackWrapper;
                            d(p).remove();
                            p = null
                        }
                        if (q.settings.horizontalScrolling) {
                            p = q.horizontalTrackWrapper;
                            d(p).remove();
                            p = null
                        }
                        if (q._fadeTimer) {
                            clearTimeout(q._fadeTimer)
                        }
                        if (q.corner) {
                            d(q.corner).remove()
                        }
                        if (q._prybar && q._prybar.parentNode && q._prybar.parentNode === this) {
                            d(q._prybar).remove()
                        }
                        this.setAttribute("style", q._style || "");
                        if (!q._hadTabIndex) {
                            r.removeAttr("tabindex")
                        }
                        r.off("scroll.enscroll.pane").off("keydown.enscroll.pane").off("mouseenter.enscroll.pane").data("enscroll", null);
                        if (this.removeEventListener) {
                            this.removeEventListener("mousewheel", s, false);
                            this.removeEventListener("DOMMouseScroll", s, false);
                            this.removeEventListener("touchstart", b, false)
                        } else {
                            if (this.detachEvent) {
                                this.detachEvent("onmousewheel", s)
                            }
                        }
                        d(h).off("resize.enscroll.window")
                    }
                })
            }
        };
    d.fn.enscroll = function (q) {
        if (g[q]) {
            return g[q].call(this)
        }
        var p = d.extend({
            verticalScrolling: true,
            horizontalScrolling: false,
            showOnHover: false,
            scrollIncrement: 20,
            minScrollbarLength: 40,
            pollChanges: true,
            drawCorner: true,
            drawScrollButtons: false,
            clickTrackToScroll: true,
            verticalTrackClass: "vertical-track",
            horizontalTrackClass: "horizontal-track",
            horizontalHandleClass: "horizontal-handle",
            verticalHandleClass: "vertical-handle",
            scrollUpButtonClass: "scroll-up-btn",
            scrollDownButtonClass: "scroll-down-btn",
            scrollLeftButtonClass: "scroll-left-btn",
            scrollRightButtonClass: "scroll-right-btn",
            cornerClass: "scrollbar-corner",
            zIndex: 1,
            horizontalHandleHTML: '<div class="left"></div><div class="right"></div>',
            verticalHandleHTML: '<div class="top"></div><div class="bottom"></div>'
        }, q);
        return this.each(function () {
            if (!p.verticalScrolling && !p.horizontalScrolling) {
                return
            }
            var B = d(this),
                I = this,
                U = B.innerWidth(),
                E = B.innerHeight(),
                u = B.offset(),
                J = B.attr("style"),
                s = true,
                x = I.scrollWidth,
                H = I.scrollHeight,
                M, K, G, R, O, A, L, z, F, S, t, D, C, y, T, Q, P, r = {
                    position: "absolute",
                    "z-index": p.zIndex,
                    margin: 0,
                    padding: 0
                }, w = function (V) {
                    m.call(B, V)
                }, v = function (W, V) {
                    if (typeof V === "string") {
                        d(W).html(V)
                    } else {
                        if (typeof V === "object" && V !== null && V.nodeType && V.nodeType === 1) {
                            W.appendChild(V)
                        }
                    }
                };
            if (p.verticalScrolling) {
                K = o.createElement("div");
                R = o.createElement("div");
                A = o.createElement("a");
                d(R).css("position", "relative").addClass("enscroll-track").addClass(p.verticalTrackClass).appendTo(K);
                if (p.drawScrollButtons) {
                    L = o.createElement("a");
                    z = o.createElement("a");
                    d(L).css({
                        display: "block",
                        "text-decoration": "none"
                    }).attr("href", "").html("&nbsp;").addClass(p.scrollUpButtonClass).on("click", function () {
                        i(I, -p.scrollIncrement);
                        return false
                    }).insertBefore(R);
                    d(z).css({
                        display: "block",
                        "text-decoration": "none"
                    }).attr("href", "").html("&nbsp;").on("click", function () {
                        i(I, p.scrollIncrement);
                        return false
                    }).addClass(p.scrollDownButtonClass).appendTo(K)
                }
                if (p.clickTrackToScroll) {
                    d(R).on("click", function (V) {
                        if (V.target === this) {
                            i(I, V.pageY > d(A).offset().top ? B.height() : -B.height())
                        }
                    })
                }
                d(A).css({
                    position: "absolute",
                    "z-index": 1
                }).attr("href", "").addClass(p.verticalHandleClass).mousedown({
                    pane: this
                }, n).click(function () {
                    return false
                }).appendTo(R);
                v(A, p.verticalHandleHTML);
                d(K).css(r).insertAfter(this);
                if (p.showOnHover) {
                    d(K).css("opacity", 0).on("mouseover.enscroll.vertical", function () {
                        c.call(I, false)
                    }).on("mouseout.enscroll.vertical", function () {
                        c.call(I)
                    })
                }
                D = d(R).outerWidth();
                B.css({
                    width: (B.width() - D) + "px",
                    "padding-right": (parseInt(B.css("padding-right"), 10) + D) + "px"
                });
                try {
                    Q = parseInt(B.css("outline-width"), 10);
                    if ((Q === 0 || isNaN(Q)) && B.css("outline-style") === "none") {
                        B.css("outline", "none")
                    }
                } catch (N) {
                    B.css("outline", "none")
                }
            }
            if (p.horizontalScrolling) {
                M = o.createElement("div");
                G = o.createElement("div");
                O = o.createElement("a");
                d(G).css({
                    position: "relative",
                    "z-index": 1
                }).addClass("enscroll-track").addClass(p.horizontalTrackClass).appendTo(M);
                if (p.drawScrollButtons) {
                    F = o.createElement("a");
                    S = o.createElement("a");
                    d(F).css("display", "block").attr("href", "").on("click", function () {
                        l(I, -p.scrollIncrement);
                        return false
                    }).addClass(p.scrollLeftButtonClass).insertBefore(G);
                    d(S).css("display", "block").attr("href", "").on("click", function () {
                        l(I, p.scrollIncrement);
                        return false
                    }).addClass(p.scrollRightButtonClass).appendTo(M)
                }
                if (p.clickTrackToScroll) {
                    d(G).on("click", function (V) {
                        if (V.target === this) {
                            l(I, V.pageX > d(O).offset().left ? B.width() : -B.width())
                        }
                    })
                }
                d(O).css({
                    position: "absolute",
                    "z-index": 1
                }).attr("href", "").addClass(p.horizontalHandleClass).click(function () {
                    return false
                }).mousedown({
                    pane: this
                }, a).appendTo(G);
                v(O, p.horizontalHandleHTML);
                d(M).css(r).insertAfter(this);
                if (p.showOnHover) {
                    d(M).css("opacity", 0).on("mouseover.enscroll.horizontal", function () {
                        c.call(I, false)
                    }).on("mouseout.enscroll.horizontal", function () {
                        c.call(I)
                    })
                }
                t = d(G).outerHeight();
                B.css({
                    height: (B.height() - t) + "px",
                    "padding-bottom": (parseInt(B.css("padding-bottom"), 10) + t) + "px"
                });
                if (!d.browser.msie || d.browser.msie && d.browser.version > 7) {
                    P = document.createElement("div");
                    d(P).css({
                        width: "1px",
                        height: "1px",
                        visibility: "hidden",
                        padding: 0,
                        margin: "-1px"
                    }).appendTo(this)
                }
            }
            if (p.verticalScrolling && p.horizontalScrolling && p.drawCorner) {
                C = o.createElement("div");
                d(C).addClass(p.cornerClass).css(r).insertAfter(this)
            }
            T = B.attr("tabindex");
            if (!T || T.length < 1) {
                B.attr("tabindex", 0);
                s = false
            }
            try {
                y = B.css("outline");
                if (!y || y.length < 1) {
                    B.css("outline", "none")
                }
            } catch (N) {
                B.css("outline", "none")
            }
            B.on({
                "scroll.enscroll.pane": function (V) {
                    j.call(this, V)
                },
                "keydown.enscroll.pane": f
            }).css("overflow", "hidden").data("enscroll", {
                settings: p,
                horizontalTrackWrapper: M,
                verticalTrackWrapper: K,
                corner: C,
                _prybar: P,
                _mouseScrollHandler: w,
                _hadTabIndex: s,
                _style: J
            });
            d(h).on("resize.enscroll.window", function (V) {
                g.reposition.call(B)
            });
            if (p.showOnHover) {
                B.on("mouseenter.enscroll.pane", function () {
                    c.call(this)
                })
            }
            if (this.addEventListener) {
                this.addEventListener("mousewheel", w, false);
                this.addEventListener("DOMMouseScroll", w, false);
                this.addEventListener("touchstart", b, false)
            } else {
                if (this.attachEvent) {
                    this.attachEvent("onmousewheel", w)
                }
            } if (p.pollChanges) {
                g.startPolling.call(B)
            } else {
                g.resize.call(B);
                g.reposition.call(B)
            }
            d(R, G).removeClass(p.verticalTrackClass).addClass(p.verticalTrackClass)
        })
    }
}(jQuery, window, document));